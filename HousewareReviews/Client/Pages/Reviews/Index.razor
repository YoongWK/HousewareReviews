@page "/products/{ProductId:int}/reviews/"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- This page is for staff to view reviews of a certain product-->
<AuthorizeView Roles="Staff">
<div class="container-fluid px-4">
    <h3 class="card-title mt-4 mb-3">Manage @product?.Name Reviews</h3>
    @if (Reviews == null)
    {
        <div class="alert alert-info">Loading Reviews...</div>
    }
    else
    {
        @* <a href="/products/@ProductId/reviews/create" class="btn btn-secondary">
            <span class="oi oi-plus"></span>
            Create New Product
        </a> *@

        <table class="table table-responsive w-100 mt-3" id="reviewsTable">
            <thead>
                <tr>
                    <th>Review Rating</th>
                    <th>Review Description</th>
                    <th>Review Reply</th>
                    <th>Comments</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var review in Reviews)
                {
                        <tr>
                        <td>@review.Rating</td>
                        <td>@review.Description</td>
                        <td>@review.Reply</td>
                        <td>
                            <a href="/reviews/@review.Id/comments" class="btn btn-info">
                                <span class="oi oi-eye"></span>
                                View
                            </a>
                        </td>
                        <td>
                            <a href="/reviews/@review.Id/view" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/reviews/@review.Id/edit" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }

                
            </tbody>
        </table>
    }
</div>
</AuthorizeView>

@code {
    private HttpClient _client;
    [Parameter] public int ProductId { get; set; }
    bool userIsStaff = false;
    //Review? review = new Review();
    Product? product = new Product();
    // private int reviewid;
    private List<Review>? Reviews;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
    }

    protected async override Task OnInitializedAsync()
    {
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{ProductId}");
        var allReviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        var productReviews = new List<Review>();
        if (allReviews != null)
        {
            foreach (var rev in allReviews)
            {
                if (rev.ProductId == ProductId)
                {
                    productReviews.Add(rev);
                }
            }
        }
        Reviews = productReviews;
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userIsStaff = authstate.User.IsInRole("Staff");
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Consumer?.FirstName}'s review?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (userIsStaff)
        {
            await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
        }
    }

    public void Dispose()
    {
        if (userIsStaff)
        {
            js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
        }
    }

    // private async Task CreateReview()
    // {
    //     await _client.PostAsJsonAsync(Endpoints.CompaniesEndpoint, review);
    //     _navManager.NavigateTo("/products/{Productid:int}");
    // }
}
