@inject IHttpClientFactory ClientFactory

<EditForm Model="@product" OnValidSubmit=@OnValidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name:</label>
            <div>
                <InputText @bind-Value="@product.Name" class="form-control" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Price: </label>
            <div>
                <InputNumber @bind-Value="@product.Price" class="form-control" />
                <ValidationMessage For="@(() => product.Price)" />
            </div>
        </div>

        <div class="form-group">
            <label>Category: </label>
            <div>
                <InputSelect @bind-Value="product.CategoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                    @if (Categories != null)
                    {
                        foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.CategoryId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description:</label>
            <div>
                <InputTextArea @bind-Value="@product.Description" class="form-control" />
                <ValidationMessage For="@(() => product.Description)" />
            </div>
        </div>

        <div class="form-group">
            <label>Logo URI:</label>
            <div class="d-flex flex-column">
                <InputFile OnChange="OnFileSelection" accept="image/png, image/jpeg" />
                <ValidationMessage For="@(() => product.ImgUri)" />
            </div>
            <img class="w-100 pt-2" src="@product.ImgUri" onerror="this.style.display='none'" />
        </div>
    </fieldset>
    <br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="@GetTarget()" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product? product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public int CompanyId { get; set; }

    private HttpClient _client;
    private IList<Category>? Categories;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
        product.CompanyId = CompanyId;
    }

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }

    private string GetTarget()
    {
        return $"products/company/{CompanyId}";
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        product.ImgUri = $"data:image/png;base64,{Convert.ToBase64String(buffers)}";
        Console.WriteLine(product.ImgUri);
    }
}