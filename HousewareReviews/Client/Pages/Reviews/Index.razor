@page "/reviews/{id:int}"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @implements IDisposable *@
@attribute [Authorize]

<FormComponent ButtonText="Finish" OnValidSubmit="CreateReview" company="company" />

@code {
    private HttpClient _client;
    [Parameter] public int id { get; set; }
    bool userIsStaff = false;
    Review? review = new Review();
    private List<Review>? Reviews;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
    }

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userIsStaff = authstate.User.IsInRole("Staff");
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Consumer?.FirstName}'s review?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.CompaniesEndpoint, review);
        _navManager.NavigateTo("/companies/{id:int}");
    }
}
