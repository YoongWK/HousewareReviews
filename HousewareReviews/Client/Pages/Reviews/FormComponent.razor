@inject IHttpClientFactory ClientFactory

<EditForm Model="@review" OnValidSubmit=@OnValidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Rating:</label>
            <div>
                <InputNumber @bind-Value="@review.Rating" class="form-control" />
                <ValidationMessage For="@(() => review.Rating)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputTextArea @bind-Value="@review.Description" class="form-control" />
                <ValidationMessage For="@(() => review.Description)" />
            </div>
        </div>
    </fieldset>
    <br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="@GetTarget()" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Review? review { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    //product and consumer
    [Parameter] public int ProductId { get; set; }
    [Parameter] public int ReviewId { get; set; }
    Review rev = new Review();


    private HttpClient _client;
    // private IList<Category>? Categories;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
        // product.CompanyId = CompanyId;
    }

    protected async override Task OnInitializedAsync()
    {
        //Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }

    private string GetTarget()
    {
        return $"products/{ProductId}";
    }
}