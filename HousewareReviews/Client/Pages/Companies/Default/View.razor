@page "/companies/{companyId:int}/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@implements IAsyncDisposable

<PageTitle>Houseware Reviews - @company?.Name</PageTitle>

<div class="container-fluid pb-3">
	<div class="d-flex align-items-center p-4 row column-gap-3" style="background-color: var(--blue)">
		<div class="col-lg">
			<img src="@company?.LogoUri" class="rounded-4 w-100" style="object-fit:cover;" onerror="this.style.display='none'" id="@imgId" onload="updateImgHeight('@imgId', 0.5)">
		</div>
		<div class="d-lg-none p-2"></div>
		<div class="col-lg-9 d-flex flex-column" style="color: var(--white)">
			<h4><b>@company?.Name</b></h4>
			<span>@productCount Products</span>
			<span>@reviewCount Reviews</span>
			<span>@companyRating <span class="oi oi-star" style="color:orange"></span></span>
		</div>
		<div class="col-12 pt-2 text-end">
			<a href="@company?.WebsiteUrl" target="_blank" class="btn btn-light rounded-5 shadow-none" style="color:var(--darkgray)">
				<span class="oi oi-globe"></span>
				<small><b>Visit Our Website</b></small>
			</a>
		</div>
	</div>
	<div class="card row bg-white rounded-4 m-4 mb-0 p-3" style="background-color: var(--white)">
		<h4 class="card-title" style="color: var(--blue)"><b>About</b></h4>
		<p>@company?.Description</p>
		<h4 class="card-title" style="color: var(--blue)"><b>Categories</b></h4>
		@if (distinctCategories?.Any() == true)
		{
			<ul class="ps-4">
				@foreach (var category in distinctCategories)
				{
					<li class="ps-2">@category</li>
				}
			</ul>
		}
		else
		{
			<p>@company?.Name products are not under any categories.</p>
		}
		<h4 class="card-title" style="color: var(--blue)"><b>Contact</b></h4>
		<p class="m-0">
			<span class="oi oi-phone" aria-hidden="true" style="width: 20px; height: 20px;"></span>
			+65 @company?.ContactNumber
		</p>
		<p class="m-0">
			<span class="oi oi-envelope-closed" aria-hidden="true" style="width: 20px; height: 20px;"></span>
			@company?.Email
		</p>
	</div>
	<div class="card row rounded-4 m-4 mb-0 p-3" style="background-color: var(--lightblue)">
		<div class="container-fluid">
			<h4 class="card-title text-center pb-3 m-0"><b>Our Products</b></h4>
			
				@if (Products?.Any() == true)
				{
					<div class="row row-cols-1 row-cols-xl-5 row-cols-lg-4 row-cols-md-3 row-cols-sm-2 g-4">
						@foreach (var product in Products)
						{
							<div class="col">
								<ProductCard product="product"></ProductCard>
							</div>
						}
					</div>
				}
				else
				{
					<p class="m-0 text-center">@company?.Name has no products yet. Come again later.</p>
				}
		</div>
	</div>
</div>

@code {
	[Parameter] public int companyId { get; set; }
	private HttpClient _client;
	private Company? company = new Company();
	private List<Product>? Products;
	private IEnumerable<String?>? distinctCategories;

	private String? imgId;
	private int productCount;
	private int reviewCount;
	private double companyRating;

	protected override void OnInitialized()
	{
		_client = ClientFactory.CreateClient("public");
		imgId = $"img-{Guid.NewGuid()}";
	}

	protected async override Task OnInitializedAsync()
	{
		company = await _client.GetFromJsonAsync<Company>($"{Endpoints.CompaniesEndpoint}/{companyId}");
		var Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		var allProducts = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
		var allReviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");

		distinctCategories = allProducts?
		.Where(p => p.CompanyId == companyId && p.CategoryId != null)
		.Select(p => Categories?.FirstOrDefault(c => c.Id == p.CategoryId)?.Name)
		.Distinct();

		Products = allProducts?.Where(p => p.CompanyId == companyId).ToList();
		productCount = Products?.Count ?? 0;

		var reviews = allReviews?.Where(r => r?.Product?.CompanyId == companyId).ToList();
		reviewCount = reviews?.Count ?? 0;
		companyRating = Math.Round((double)(reviews?.Average(r => r?.Rating) ?? 0), 1);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await js.InvokeVoidAsync("addImgHeightListener", imgId, 0.5);
		}
	}

	public async ValueTask DisposeAsync()
	{
		await js.InvokeVoidAsync("removeImgHeightListener", imgId);
	}
}
