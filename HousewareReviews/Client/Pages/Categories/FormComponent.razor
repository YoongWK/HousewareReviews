@inject IHttpClientFactory ClientFactory

<EditForm Model="@category" OnValidSubmit=@OnValidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name:</label>
            <div>
                <InputText @bind-Value="@category.Name" class="form-control" />
                <ValidationMessage For="@(() => category.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Logo URI:</label>
            <div class="d-flex flex-column">
                <InputFile OnChange="OnFileSelection" accept="image/png, image/jpeg" />
                <ValidationMessage For="@(() => category.ImgUri)" />
            </div>
            <img class="w-100 pt-2" src="@category.ImgUri" onerror="this.style.display='none'" />
        </div>
    </fieldset>
    <br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="categories" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Category? category { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private HttpClient _client;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        category.ImgUri = $"data:image/png;base64,{Convert.ToBase64String(buffers)}";
    }
}
