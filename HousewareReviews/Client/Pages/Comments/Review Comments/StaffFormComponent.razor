@inject IHttpClientFactory ClientFactory
@attribute [Authorize(Roles = "Staff")]

<EditForm Model="@comment" OnValidSubmit="@(() => OnValidSubmitCallback(comment))" style="font-size:1rem;">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-start mb-0 pt-3" />
    <div class="modal-body text-start">
        <fieldset disabled="@Disabled">
            <div class="form-group pb-3">
                <label>Consumer:</label>
                <div>
                    @if (DisallowConsumer)
                    {
                        <input type="text" value="@((comment.Consumer != null) ? $"{comment.Consumer.FirstName} {comment.Consumer.LastName}" : "[Deleted Consumer]")" class="form-control shadow-none" disabled />
                    }
                    else
                    {
                        <InputSelect @bind-Value="comment.ConsumerId" class="form-control shadow-none">
                            <option value="">-- Select Consumer --</option>
                            @if (Consumers != null)
                            {
                                foreach (var consumer in Consumers)
                                {
                                    if (consumer.UserId == null)
                                    {
                                        <option value="@consumer.Id">@consumer.FirstName @consumer.LastName</option>
                                    }
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => comment.ConsumerId)" />
                    }
                </div>
            </div>

            <div class="form-group">
                <label class="w-50">Description:</label>
                @if (!Disabled)
                {
                    <p class="d-inline-flex justify-content-end w-50 m-0 text-secondary" style="font-size:0.8rem;">Count:&nbsp;<span>@(comment.Description?.Length ?? 0)</span>/300</p>
                }
                <div>
                    <InputTextArea @bind-Value="@comment.Description" class="form-control shadow-none" style="resize:none;" rows="4" maxlength="301" oninput="updateCharCount(this, 300)" />
                    <ValidationMessage For="@(() => comment.Description)" />
                </div>
            </div>

            @if (ShowDate)
            {
                <div class="form-group py-3">
                    <label>Date Created:</label>
                    <div>
                        <input type="text" value="@comment.DateCreated.ToString("d MMM yyyy")" class="form-control shadow-none" disabled />

                    </div>
                </div>

                <div class="form-group">
                    <label>Date Updated:</label>
                    <div>
                        <input type="text" value="@comment.DateUpdated.ToString("d MMM yyyy")" class="form-control shadow-none" disabled />
                    </div>
                </div>
            }
        </fieldset>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal" @onclick="OnInitAsync">Close</button>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success shadow-none">
                @ButtonText
            </button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool ShowDate { get; set; } = false;
    [Parameter] public bool DisallowConsumer { get; set; } = true;
    [Parameter] public Comment? comment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback<(Comment, bool)> OnValidSubmit { get; set; }
    [Parameter] public Func<Task> OnInitAsync { get; set; }

    private HttpClient _client;
    private IList<Consumer> Consumers;
    public Comment orgComment;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
        orgComment = comment;
    }

    private async Task OnValidSubmitCallback(Comment com)
    {
        if (OnValidSubmit.HasDelegate)
        {
            com.Consumer = null;
            var comChanged = false;
            if (com.Description != orgComment.Description)
            {
                comChanged = true;
            }
            await OnValidSubmit.InvokeAsync((com, comChanged));
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Consumers = await _client.GetFromJsonAsync<List<Consumer>>($"{Endpoints.ConsumersEndpoint}");
    }
}