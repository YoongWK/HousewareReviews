@page "/companies/{CompanyId:int}/products/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="container-fluid p-4">
    <h3 class="card-title pb-3">@company?.Name Products</h3>

    @if (Products == null)
    {
        <div class="alert alert-info">Loading Products...</div>
    }
    else
    {
        <AuthorizeView Roles="Staff">
            <button type="button" class="btn btn-success btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#create-product">
                <span class="oi oi-plus"></span>
                Create Product
            </button>
            <div class="modal fade" id="create-product" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="create-product-label" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="create-product-label">Create New @company.Name Product</h1>
                            <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                        </div>
                        <FormComponent ButtonText="Create" OnValidSubmit="@((prod)=>CreateProduct(prod))" OnInitAsync="OnInitializedAsync" product="new Product{CompanyId=CompanyId}" />
                    </div>
                </div>
            </div>

            <table class="table table-responsive w-100 py-2 m-0" id="productsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th class="d-none d-md-table-cell">Price</th>
                        <th class="d-none d-lg-table-cell">Image</th>
                        <th>Reviews</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>@product.Name</td>
                            <td class="d-none d-md-table-cell">@product.Price</td>
                            <td class="d-none d-lg-table-cell">
                                <img src="@product.ImgUri" style="height:70px;width:70px;object-fit:cover;" />
                            </td>
                            <td>
                                <a href="/products/@product.Id/reviews" class="btn btn-info btn-sm shadow-none">
                                    <span class="oi oi-eye"></span>&nbsp;
                                    @{
                                        var reviewCount = 0;
                                        if (Reviews != null)
                                        {
                                            @foreach (var review in Reviews)
                                            {
                                                if (review.ProductId == product.Id)
                                                {
                                                    reviewCount++;
                                                }
                                            }
                                        }
                                        @reviewCount
                                    }
                                </a>
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#view-product-@product.Id">
                                    <span class="oi oi-book"></span>
                                </button>
                                <div class="modal fade" id="view-product-@product.Id" tabindex="-1" aria-labelledby="view-product-label-@product.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="view-product-label-@product.Id">View @product.Name</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <FormComponent product="product" Disabled="true" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-warning btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#edit-product-@product.Id">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <div class="modal fade" id="edit-product-@product.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="edit-product-label-@product.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="edit-product-label-@product.Id">Edit @product.Name</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                            </div>
                                            <FormComponent OnValidSubmit="@((prod)=>EditProduct(prod))" OnInitAsync="OnInitializedAsync" product="product" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-danger btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#delete-product-@product.Id">
                                    <span class="oi oi-delete"></span>
                                </button>
                                <div class="modal fade" id="delete-product-@product.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="delete-product-label-@product.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="delete-product-label-@product.Id">Confirm Delete @product.Name?</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body text-start">
                                                This action cannot be undone.
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="@(()=>DeleteProduct(product.Id))">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </AuthorizeView>
    }
</div>

@code {
    [Parameter] public int CompanyId { get; set; }
    private HttpClient _client;
    private Company? company;
    private List<Product>? Products;
    private List<Review>? Reviews;
    bool userIsStaff = false;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
    }

    protected async override Task OnInitializedAsync()
    {
        company = await _client.GetFromJsonAsync<Company>($"{Endpoints.CompaniesEndpoint}/{CompanyId}");
        var allProducts = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        var companyProducts = new List<Product>();
        if (allProducts != null)
        {
            foreach (var product in allProducts)
            {
                if (product.CompanyId == CompanyId)
                {
                    companyProducts.Add(product);
                }
            }
        }
        Products = companyProducts;
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userIsStaff = authstate.User.IsInRole("Staff");
    }

    private async Task CreateProduct(Product prod)
    {
        await _client.PostAsJsonAsync(Endpoints.ProductsEndpoint, prod);
        await js.InvokeVoidAsync("hideModal", "#create-product");
        await OnInitializedAsync();
    }

    private async Task EditProduct(Product prod)
    {
        await _client.PutAsJsonAsync($"{Endpoints.ProductsEndpoint}/{prod.Id}", prod);
        await js.InvokeVoidAsync("hideModal", $"#edit-product-{prod.Id}");
        await OnInitializedAsync();
    }

    private async Task DeleteProduct(int productId)
    {
        if (Products != null)
        {
            await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (userIsStaff)
        {
            await js.InvokeVoidAsync("AddDataTable", "#productsTable", "Search Products");
        }
    }

    public void Dispose()
    {
        if (userIsStaff)
        {
            js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
        }
    }
}
