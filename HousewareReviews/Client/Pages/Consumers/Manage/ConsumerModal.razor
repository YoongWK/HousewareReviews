@inject IJSRuntime js
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Staff")]

<button type="button" class="btn @(Disabled? "btn-secondary" : btnColor) btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#@Id" disabled="@Disabled" >
    <span class="oi @btnIcon"></span>
    @(Action == "Create" ? "Create Consumer" : "")
</button>
<div class="modal fade" id="@Id" data-bs-backdrop="@(Action == "View" ? "true" : "static")" data-bs-keyboard="@(Action == "View" ? "true" : "false")" tabindex="-1" aria-labelledby="label-@Id" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
				<h1 class="modal-title fs-5" id="label-@Id">@Action @ItemName</h1>
				<button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitAsync"></button>
            </div>
			<EditForm Model="@Consumer" OnValidSubmit="@(() => OnValidSubmitCallback(Consumer))" style="font-size:1rem;">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-start mb-0 pt-3" />
				<div class="modal-body text-start">
					<fieldset disabled="@(Action == "View" ? true : false)">
						<div class="form-group pb-3">
							<label>First Name:</label>
							<div>
								<InputText @bind-Value="@Consumer.FirstName" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.FirstName)" />
							</div>
						</div>

						<div class="form-group pb-3">
							<label>Last Name:</label>
							<div>
								<InputText @bind-Value="@Consumer.LastName" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.LastName)" />
							</div>
						</div>

						<div class="form-group pb-3">
							<label>NRIC:</label>
							<div>
								<InputText @bind-Value="@Consumer.NRIC" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.NRIC)" />
							</div>
						</div>

						<div class="form-group pb-3">
							<label>Email:</label>
							<div>
								<InputText @bind-Value="@Consumer.Email" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.Email)" />
							</div>
						</div>

						<div class="form-group pb-3">
							<label>Contact Number:</label>
							<div>
								<InputText @bind-Value="@Consumer.ContactNumber" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.ContactNumber)" />
							</div>
						</div>

						<div class="form-group pb-3">
							<label>Password:</label>
							<div>
								<InputText @bind-Value="@Consumer.Password" type="password" class="form-control shadow-none" />
								<ValidationMessage For="@(() => Consumer.Password)" />
							</div>
						</div>

						<div class="form-group">
							<label>Image:</label>
							@if (Action != "View" ? true : false)
							{
								<div class="d-flex flex-column pb-1">
									<InputFile OnChange="OnFileSelection" class="file-upload" accept="image/png, image/jpeg" />
									<ValidationMessage For="@(() => Consumer.ProfileImgUri)" />
								</div>
							}
							<div class="text-center">
								<img class="w-50" src="@Consumer.ProfileImgUri" style="border-radius:50%;border:2px solid;object-fit:cover;" onerror="this.style.display='none'" id="@imgId" />
							</div>
						</div>
					</fieldset>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal" @onclick="OnInitAsync">Close</button>
					@if (Action != "View" ? true : false)
					{
						<button type="submit" class="btn btn-success shadow-none">
							@(Action == "Edit" ? "Save" : "Create")
						</button>
					}
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[Parameter] public string? Id { get; set; }
	[Parameter] public string? ItemName { get; set; }
	[Parameter] public string? Action { get; set; }
	[Parameter] public EventCallback<Consumer> OnValidSubmit { get; set; }
	[Parameter] public EventCallback OnInitAsync { get; set; }
	[Parameter] public Consumer? Consumer { get; set; }
	[Parameter] public bool Disabled { get; set; } = false;

	private string btnColor;
	private string btnIcon;
	private string imgId;

	protected override void OnInitialized()
	{
		switch (Action.ToLower())
		{
			case "create":
				btnColor = "btn-success";
				btnIcon = "oi-plus";
				Action = "Create";
				break;
			case "view":
				btnColor = "btn-primary";
				btnIcon = "oi-book";
				Action = "View";
				break;
			case "edit":
				btnColor = "btn-warning";
				btnIcon = "oi-pencil";
				Action = "Edit";
				break;
		}
		imgId = $"profile-{Guid.NewGuid()}";
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await js.InvokeVoidAsync("addModalImgHeightListener", Id, imgId, 1);
		}
	}

	public async ValueTask DisposeAsync()
	{
		await js.InvokeVoidAsync("removeModalImgHeightListener", Id);
	}

	private async Task OnFileSelection(InputFileChangeEventArgs e)
	{
		var imgFile = e.File;
		var buffers = new byte[imgFile.Size];
		await imgFile.OpenReadStream().ReadAsync(buffers);
		Consumer.ProfileImgUri = $"data:image/png;base64,{Convert.ToBase64String(buffers)}";
		await js.InvokeVoidAsync("updateImgHeight", imgId, 1);
	}

	private async Task OnValidSubmitCallback(Consumer con)
	{
		if (OnValidSubmit.HasDelegate)
		{
			await OnValidSubmit.InvokeAsync(con);
		}
	}
}
