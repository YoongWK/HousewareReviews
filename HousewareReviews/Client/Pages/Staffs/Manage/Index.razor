@page "/manage/staffs/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize(Roles = "Staff")]

<div class="container-fluid p-4">
    <h4 class="card-title pb-3">Staffs</h4>

    @if (Staffs == null)
    {
        <div class="alert alert-info">Loading Staffs...</div>
    }
    else
    {
        <StaffModal Id="@("create-staff")"
                        ItemName="New Staff"
                        Action="Create"
                        OnValidSubmit="@((stf)=>CreateStaff(stf))"
                        OnInitAsync="OnInitializedAsync"
                        Staff="@(new Staff{ProfileImgUri = "/images/users/default.jpg"})" />

        <table class="table table-responsive w-100 py-2 m-0" id="staffsTable">
            <thead>
                <tr>
                    <th>NRIC</th>
                    <th>Status</th>
                    <th class="d-none d-sm-table-cell">Name</th>
                    <th class="d-none d-md-table-cell">Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var staff in Staffs)
                {
                    var authenticated = String.IsNullOrEmpty(staff.UserId) ? false : true;
                    var staffName = $"{staff.FirstName} {staff.LastName}";
                    <tr>
                        <td>@staff.NRIC</td>
                        <td>@(authenticated ? "Auth'd" : "Unauth'd")</td>
                        <td class="d-none d-sm-table-cell">@staffName</td>
                        <td class="d-none d-md-table-cell">
                            <img src="@staff.ProfileImgUri" class="profile-image-sm" />
                        </td>
                        <td>
                            <StaffModal Id="@($"view-staff-{staff.Id}")"
                                            ItemName="@staffName"
                                            Action="View"
                                            Staff="staff"/>

                            <StaffModal Id="@($"edit-staff-{staff.Id}")"
                                            ItemName="@staffName"
                                            Action="Edit"
                                            OnValidSubmit="@((stf)=>EditStaff(stf))"
                                            OnInitAsync="OnInitializedAsync"
                                            Staff="staff"
                                            Disabled="authenticated"/>

                            <ConfirmDeleteModal Id="@($"delete-staff-{staff.Id}")"
                                                    ItemName="@staffName"
                                                    DeleteFunction="@(()=>DeleteStaff(staff.Id))"
                                                    Disabled="authenticated" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private HttpClient _client;
    private List<Staff>? Staffs;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
    }

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    private async Task CreateStaff(Staff stf)
    {
        await _client.PostAsJsonAsync(Endpoints.StaffsEndpoint, stf);
        await js.InvokeVoidAsync("hideModal", "#create-staff");
        await OnInitializedAsync();
    }

    private async Task EditStaff(Staff stf)
    {
        await _client.PutAsJsonAsync($"{Endpoints.StaffsEndpoint}/{stf.Id}", stf);
        await js.InvokeVoidAsync("hideModal", $"#edit-staff-{stf.Id}");
        await OnInitializedAsync();
    }

    private async Task DeleteStaff(int staffId)
    {
        if (Staffs != null)
        {
            await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staffsTable", "Search Staffs");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
    }
}
