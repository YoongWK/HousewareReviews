@page "/reviews/{ReviewId:int}/comments/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="container-fluid p-4">
    <h4 class="card-title pb-3">Review @review?.Id Comments</h4>

    @if (Comments == null)
    {
        <div class="alert alert-info">Loading Comments...</div>
    }
    else
    {
        <!-- This page is for staff to view comments of a certain review-->
        <AuthorizeView Roles="Staff">
            <button type="button" class="btn btn-success btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#create-comment">
                <span class="oi oi-plus"></span>
                Create Comment
            </button>
            <div class="modal fade" id="create-comment" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="create-comment-label" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="create-comment-label">Create New Review @review.Id Comment</h1>
                            <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                        </div>
                        <StaffFormComponent ButtonText="Create" OnValidSubmit="@((comData)=>CreateComment(comData))" OnInitAsync="OnInitializedAsync" comment="new Comment{ReviewId=review.Id}" DisallowConsumer="false" />
                    </div>
                </div>
            </div>

            <table class="table table-responsive w-100 py-2 m-0" id="commentsTable">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Consumer</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var comment in Comments)
                    {
                        <tr>
                            <td>@comment.Id</td>
                            <td>@((comment.Consumer != null) ? $"{comment.Consumer.FirstName} {comment.Consumer.LastName}" : "[Deleted Consumer]")</td>
                            <td>
                                <button type="button" class="btn btn-primary btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#view-comment-@comment.Id">
                                    <span class="oi oi-book"></span>
                                </button>
                                <div class="modal fade" id="view-comment-@comment.Id" tabindex="-1" aria-labelledby="view-comment-label-@comment.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="view-comment-label-@comment.Id">View Comment @comment.Id</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <StaffFormComponent comment="comment" Disabled="true" ShowDate="true" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-warning btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#edit-comment-@comment.Id">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <div class="modal fade" id="edit-comment-@comment.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="edit-comment-label-@comment.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="edit-comment-label-@comment.Id">Edit Comment @comment.Id</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                            </div>
                                            <StaffFormComponent OnValidSubmit="@((comData)=>EditComment(comData))" OnInitAsync="OnInitializedAsync" comment="comment" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-danger btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#delete-comment-@comment.Id">
                                    <span class="oi oi-delete"></span>
                                </button>
                                <div class="modal fade" id="delete-comment-@comment.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="delete-comment-label-@comment.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="delete-comment-label-@comment.Id">Confirm Delete Comment @comment.Id?</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body text-start">
                                                This action cannot be undone.
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="@(()=>DeleteComment(comment.Id))">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </AuthorizeView>
    }
</div>

@code {
    [Parameter] public int ReviewId { get; set; }
    private HttpClient _client;
    Review? review;
    private List<Comment>? Comments;
    bool userIsStaff = false;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
    }

    protected async override Task OnInitializedAsync()
    {
        review = await _client.GetFromJsonAsync<Review>($"{Endpoints.ReviewsEndpoint}/{ReviewId}");
        var allComments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");
        var reviewComments = new List<Comment>();
        if (allComments != null)
        {
            foreach (var com in allComments)
            {
                if (com.ReviewId == ReviewId)
                {
                    reviewComments.Add(com);
                }
            }
        }
        Comments = reviewComments;
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userIsStaff = authstate.User.IsInRole("Staff");
    }
    private async Task CreateComment((Comment com, bool comChanged) comData)
    {
        var latestDateTime = DateTime.Now;
        comData.com.DateCreated = latestDateTime;
        comData.com.DateUpdated = latestDateTime;
        await _client.PostAsJsonAsync(Endpoints.CommentsEndpoint, comData.com);
        await js.InvokeVoidAsync("hideModal", "#create-comment");
        await OnInitializedAsync();
    }

    private async Task EditComment((Comment com, bool comChanged) comData)
    {
        var latestDateTime = DateTime.Now;
        comData.com.DateUpdated = comData.comChanged ? latestDateTime : comData.com.DateUpdated;
        await _client.PutAsJsonAsync($"{Endpoints.CommentsEndpoint}/{comData.com.Id}", comData.com);
        await js.InvokeVoidAsync("hideModal", $"#edit-comment-{comData.com.Id}");
        await OnInitializedAsync();
    }

    private async Task DeleteComment(int commentId)
    {
        if (Comments != null)
        {
            await _client.DeleteAsync($"{Endpoints.CommentsEndpoint}/{commentId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (userIsStaff)
        {
            await js.InvokeVoidAsync("AddDataTable", "#commentsTable", "Search Comments");
        }
    }

    public void Dispose()
    {
        if (userIsStaff)
        {
            js.InvokeVoidAsync("DataTablesDispose", "#commentsTable");
        }
    }
}
