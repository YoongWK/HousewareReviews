@inject IJSRuntime js
@attribute [Authorize(Roles = "Staff")]

<EditForm Model="@staff" OnValidSubmit="@(() => OnValidSubmitCallback(staff))" style="font-size:1rem;">
	<DataAnnotationsValidator />
	<ValidationSummary class="text-start mb-0 pt-3" />
	<div class="modal-body text-start">
		<fieldset disabled="@Disabled">
			<div class="form-group pb-3">
				<label>First Name:</label>
				<div>
					<InputText @bind-Value="@staff.FirstName" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.FirstName)" />
				</div>
			</div>

			<div class="form-group pb-3">
				<label>Last Name:</label>
				<div>
					<InputText @bind-Value="@staff.LastName" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.LastName)" />
				</div>
			</div>

			<div class="form-group pb-3">
				<label>NRIC:</label>
				<div>
					<InputText @bind-Value="@staff.NRIC" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.NRIC)" />
				</div>
			</div>

			<div class="form-group pb-3">
				<label>Email:</label>
				<div>
					<InputText @bind-Value="@staff.Email" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.Email)" />
				</div>
			</div>

			<div class="form-group pb-3">
				<label>Contact Number:</label>
				<div>
					<InputText @bind-Value="@staff.ContactNumber" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.ContactNumber)" />
				</div>
			</div>

			<div class="form-group pb-3">
				<label>Password:</label>
				<div>
					<InputText @bind-Value="@staff.Password" type="password" class="form-control shadow-none" />
					<ValidationMessage For="@(() => staff.Password)" />
				</div>
			</div>

			<div class="form-group">
				<label>Image:</label>
				@if (!Disabled)
				{
					<div class="d-flex flex-column pb-1">
						<InputFile OnChange="OnFileSelection" class="file-upload" accept="image/png, image/jpeg" />
						<ValidationMessage For="@(() => staff.ProfileImgUri)" />
					</div>
				}
				<div class="text-center">
					<img class="w-50" src="@staff.ProfileImgUri" style="border-radius: 50%;border: 2px solid;object-fit: cover;" onerror="this.style.display='none'" id="@imgId" />
				</div>
			</div>
		</fieldset>
	</div>

	<div class="modal-footer">
		<button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal" @onclick="OnInitAsync">Close</button>
		@if (!Disabled)
		{
			<button type="submit" class="btn btn-success shadow-none">
				@ButtonText
			</button>
		}
	</div>
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Staff? staff { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback<Staff> OnValidSubmit { get; set; }
	[Parameter] public Func<Task> OnInitAsync { get; set; }

	private string imgId;

	protected override void OnInitialized()
	{
		imgId = $"profile-{Guid.NewGuid()}";
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await js.InvokeVoidAsync("imgHeightListener", imgId);
		}
	}

	private async Task OnValidSubmitCallback(Staff stf)
	{
		if (OnValidSubmit.HasDelegate)
		{
			await OnValidSubmit.InvokeAsync(stf);
		}
	}

	private async Task OnFileSelection(InputFileChangeEventArgs e)
	{
		var imgFile = e.File;
		var buffers = new byte[imgFile.Size];
		await imgFile.OpenReadStream().ReadAsync(buffers);
		staff.ProfileImgUri = $"data:image/png;base64,{Convert.ToBase64String(buffers)}";
	}
}