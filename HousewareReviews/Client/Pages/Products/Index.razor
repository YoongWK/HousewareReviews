@page "/products/{id:int}/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Roles="Consumer">
    <div class="container-fluid">
        <div class="d-flex align-items-center p-4 row column-gap-2" style="background-color: var(--lightblue)">
            <div class="col-lg">
                <img src="@product.ImgUri" class="rounded-4 w-100">
            </div>
            <div class="d-lg-none p-2"></div>
            <div class="col-lg-7 d-flex flex-column">
                <h4><b>@product.Name</b></h4>
                <span>@product.Description</span>
                <br />
                <span>$@String.Format("{0:F2}", product.Price)</span>
                <span>Company: <span style="color: var(--blue)">@product.Company?.Name</span></span>
                <span>Category: <span style="color: var(--blue)">@(product.Category?.Name ?? "No Category")</span></span>
            </div>
            <div class="d-lg-none p-2"></div>
            <div class="col-lg d-flex justify-content-end">
                <button type="button" class="btn rounded-5 text-white shadow-none" style="background-color: var(--blue)" data-bs-toggle="modal" data-bs-target="#write-review">
                    <small><b>Write A Review</b></small>
                    <span class="oi oi-share"></span>
                </button>
                <div class="modal fade" id="write-review" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="write-review-label" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="create-review-label">Write Review for @product.Name</h1>
                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                            </div>
                            <ReviewFormComponent ButtonText="Create" OnValidSubmit="@((revData)=>WriteReview(revData))" OnInitAsync="OnInitializedAsync" review="new Review{ProductId=id, ConsumerId=currentconsumerid}" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
            <div class="col-lg">
                <img src="@product.Company?.LogoUri" class="rounded-4 w-100">
            </div>
            <div class="col-lg-3">
                <h5 class="m-0">@product.Company?.Name</h5>
            </div>
            <div class="col-lg">
                <h6>Total Reviews:</h6>
                <span>
                    @companyreviewCount
                </span>
            </div>
            <div class="col-lg">
                <h6>Overall Rating:</h6>
                <span>
                    @{
                        if (companyreviews != null && companyreviewCount >0)
                        {
                            int? sumofRatings = 0;
                            foreach (var rev in companyreviews)
                            {
                                sumofRatings += rev.Rating;
                            }
                            overallRating = Math.Round(((decimal)sumofRatings / companyreviewCount), 1);
                        }
                    }
                    @overallRating
                    <span class="oi oi-star" style="color:orange"></span>
                </span>
            </div>
            <div class="col-lg d-flex justify-content-end">
                <a href="/companies/@product.CompanyId" class="btn rounded-5 text-white" style="background-color: var(--blue)">
                    <small><b>View Page</b></small>
                    <span class="oi oi-arrow-right"></span>
                </a>
            </div>
        </div>

        <!--Card for progress bars for Reviews-->
        <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
            <div class="d-flex">
                <div class="me-auto">
                    <h3 class="card-title" style="color: var(--black)"><b>Reviews (@productreviewCount)</b></h3>
                </div>
                <div>
                    <small><b>Sort: </b></small>
                    <a class="dropdown-toggle" style="color:var(--blue)" role="button" id="dropdownmenuitems" data-bs-toggle="dropdown" aria-expanded="false">
                        @selectedSortOptionText
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" style="cursor:pointer" aria-labelledby="drowpdownmenuitems">
                        <li><a class="dropdown-item" @onclick="()=>ChangeSortOption(1)">Newest First</a></li>
                        <li><a class="dropdown-item" @onclick="()=>ChangeSortOption(2)">Oldest First</a></li>
                        <li><a class="dropdown-item" @onclick="()=>ChangeSortOption(3)">Highest Rating</a></li>
                        <li><a class="dropdown-item" @onclick="()=>ChangeSortOption(4)">Lowest Rating</a></li>
                    </ul>
                </div>
            </div>
            <div>
                @{
                    if (reviews != null && productreviewCount > 0)
                    {
                        int? sumofRatings = 0;
                        foreach (var rev in reviews)
                        {
                            sumofRatings += rev.Rating;
                        }
                        productRating = Math.Round(((decimal)sumofRatings / productreviewCount), 1);
                    }
                }
                @productRating
                <span class="oi oi-star" style="color:orange"></span>
            </div>
            @{
                // dictionary key:value = rating:count
                Dictionary<int, int> ratingCounts = new Dictionary<int, int>
                {
                    { 1, 0 },
                    { 2, 0 },
                    { 3, 0 },
                    { 4, 0 },
                    { 5, 0 }
                };
                foreach (var review in reviews)
                {
                    int rating = review.Rating ?? 0;

                    ratingCounts[rating]++;
                }
            }

            @foreach (var ratingCount in ratingCounts.OrderByDescending(kvp => kvp.Key)) {
                int rating = ratingCount.Key;
                int count = ratingCount.Value;
                string ratingColor = GetRatingColor(rating);

                <div class="d-flex">
                    <div class="pe-2">
                        <input type="checkbox" id="checkbox-@rating" style="width:1rem; height:1rem;" class="align-middle" @onchange="()=>ToggleRating(rating)" checked="@selectedRatings.Contains(rating)">
                        <label for="checkbox-@rating" style="font-size:1rem; width:3rem; text-align:left;" class="align-middle">@rating-star</label>
                    </div>
                    <div class="flex-grow-1 p-1">
                        <div class="progress w-100">
                            <div class="progress-bar align-middle rounded-2" role="progressbar" style="width: @((Double) (count)/ (Double) (reviews.Count) * 100.0)%; background-color: @ratingColor" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    <div class="ps-2 align-middle">
                        <div class="progress-number" style="width:0.5rem; text-align:right;">@count</div>
                    </div>
                </div>
            }
                          
        </div>

        @if (reviews != null)
        {
            //logged in consumer reviews displayed at the top
            @foreach (var review in reviews
                .Where(r => selectedRatings.Contains(r.Rating ?? 0))
                .OrderByDescending(r => r?.ConsumerId == currentconsumerid)
                .ThenBy(GetSortExpression(selectedSortOption)))@* r => r.DateUpdated) *@ //also sort by descending and ascending ratings
            {
                <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
                    <div class="d-flex">
                        <div class="me-auto">
                            <h4>
                                <img class="profile" src="@review.Consumer?.ProfileImgUri" style="width: 30px; height: 30px;" />
                                <b>@((review.Consumer != null) ? $"{review.Consumer.FirstName} {review.Consumer.LastName}" : "Deleted Consumer")</b>
                            </h4>
                        </div>
                        <div>
                            <h6><b>Last Updated: @review.DateUpdated.ToString("d MMM yyyy")</b></h6>
                        </div>
                    </div>
                    <hr />
                    <h4 class="align-items-center">
                        @{
                            int maxRating = 5; // Assuming a maximum of 5 stars
                            int? rating = review.Rating; 

                            for (int i = 1; i <= maxRating; i++)
                            {
                                <span class="oi oi-star me-1" style="color: @(i <= rating ? "orange" : "gray")"></span>
                            }
                        }
                    </h4>
                    <br />
                    <p>@review.Description</p>
                    <br />
                    <div class="d-flex align-items-center">
                        <div class="me-auto">
                            <h6><b>Date Reviewed: @review.DateCreated.ToString("d MMM yyyy")</b></h6>
                        </div>
                        @if (review.ConsumerId == currentconsumerid)
                        {
                            <div>
                                <a class="text-warning" style="text-decoration: none; cursor: pointer" data-bs-toggle="modal" data-bs-target="#modify-review-@review.Id">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                    <small><b>Edit</b></small>
                                </a>
                                <div class="modal fade" id="modify-review-@review.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modify-review-label-@review.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="modify-review-label-@review.Id">Edit Your Review</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                            </div>
                                            <ReviewFormComponent OnValidSubmit="@((revData)=>ModifyReview(revData))" OnInitAsync="OnInitializedAsync" review="review" />
                                        </div>
                                    </div>
                                </div>
                                &nbsp;
                                <a class="text-danger" style="text-decoration: none; cursor: pointer" data-bs-toggle="modal" data-bs-target="#remove-review-@review.Id">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                    <small><b>Delete</b></small>
                                </a>
                                <div class="modal fade" id="remove-review-@review.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="remove-review-label-@review.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="remove-review-label-@review.Id">Confirm Delete Review?</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body text-start">
                                                This action cannot be undone.
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="@(()=>removeReview(review.Id))">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <hr />

                    <div class="d-flex flex-column container">
                        <div class="d-flex">
                            <div class="me-auto">
                                <button class="btn shadow-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapseReview-@review.Id" aria-expanded="false" aria-controls="collapseReview-@review.Id">
                                    <small>View Replies & Comments</small>
                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
                                </button>
                            </div>

                            <div>
                                <a style="text-decoration: none; color: var(--black); cursor: pointer" data-bs-toggle="modal" data-bs-target="#write-comment-@review.Id">
                                    <span class="oi oi-comment-square" aria-hidden="true"></span>
                                    <small>Comment</small>
                                </a>
                                <div class="modal fade" id="write-comment-@review.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="write-comment-@review.Id-label" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="write-comment-@review.Id-label">Make a comment</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                            </div>
                                            <CommentFormComponent ButtonText="Create" OnValidSubmit="@((comData)=>WriteComment(comData))" OnInitAsync="OnInitializedAsync" comment="new Comment{ReviewId=review.Id, ConsumerId=currentconsumerid}" />
                                        </div>
                                    </div>
                                </div>
                                &nbsp;
                                @{
                                    Reviewreport reviewreport = new Reviewreport {Outcome="Pending", ConsumerId=currentconsumerid, ReviewId=review.Id};
                                    bool rrCreated = false;

                                    foreach (var rr in Reviewreports)
                                    {
                                        if (rr.ConsumerId == currentconsumerid && rr.ReviewId == review.Id)
                                        {
                                            rrCreated = true;
                                            reviewreport = rr;
                                        }
                                    }
                                    if (rrCreated)
                                    {
                                        <a style="text-decoration: none; color: var(--black); cursor:pointer;" data-bs-toggle="modal" data-bs-target="#edit-reviewreport-@reviewreport.Id">
                                            <span class="oi oi-flag" aria-hidden="true"></span>
                                            <small>Report</small>
                                        </a>
                                        <div class="modal fade" id="edit-reviewreport-@reviewreport.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="edit-reviewreport-label-@reviewreport.Id" aria-hidden="true">
                                            <div class="modal-dialog modal-dialog-centered">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="edit-reviewreport-label-@reviewreport.Id">Edit Your Report</h1>
                                                        <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                                    </div>
                                                    <ReviewreportFormComponent OnValidSubmit="@((rreport)=>EditReviewReport(rreport))" OnInitAsync="OnInitializedAsync" reviewreport="reviewreport" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <a style="text-decoration: none; color: var(--black) cursor:pointer;" data-bs-toggle="modal" data-bs-target="#make-reviewreport-@reviewreport.Id">
                                            <span class="oi oi-flag" aria-hidden="true"></span>
                                            <small>Report</small>
                                        </a>
                                        <div class="modal fade" id="make-reviewreport-@reviewreport.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="make-reviewreport-label-@reviewreport.Id" aria-hidden="true">
                                            <div class="modal-dialog modal-dialog-centered">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="make-reviewreport-label-@reviewreport.Id">Make A Report</h1>
                                                        <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                                    </div>
                                                    <ReviewreportFormComponent ButtonText="Submit" OnValidSubmit="@((rreport)=>MakeReviewReport(rreport))" OnInitAsync="OnInitializedAsync" reviewreport="reviewreport" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                        <div class="collapse" id="collapseReview-@review.Id">
                            @if (!String.IsNullOrEmpty(review.Reply))
                            {
                                <div class="d-flex align-items-center m-4 p-3 row bg-light rounded-4" style="background-color:#ADD8E6">
                                    <div class="d-flex">
                                        <div class="me-auto">
                                            <h4>
                                                <span class="oi"><span class="oi-arrow-thick-right" aria-hidden="true"></span></span>
                                                <b>Reply from @product.Company.Name</b>
                                            </h4>
                                        </div>
                                        <div>
                                            <h6><b>Date Replied: @(review.DateReplied?.ToString("d MMM yyyy") ?? "Not Replied")</b></h6>
                                        </div>
                                    </div>
                                    <hr />
                                    <p>@review.Reply</p>
                                </div>
                            }

                            @foreach (var comment in Comments.OrderBy<Comment, int>(c => c.ConsumerId == currentconsumerid ? 0 : 1))
                            {
                                if (comment.ReviewId == review.Id)
                                {
                                    <div class="d-flex align-items-center m-4 p-3 row bg-light rounded-4" style="background-color:#ADD8E6">
                                        <div class="d-flex">
                                            <div class="me-auto">
                                                <h4>
                                                    <img class="profile" src="@comment.Consumer?.ProfileImgUri" style="width: 30px; height: 30px;" />
                                                    <b>@((comment.Consumer != null) ? $"{comment.Consumer.FirstName} {comment.Consumer.LastName}" : "Deleted Consumer")</b>
                                                </h4>
                                            </div>
                                            <div>
                                                <h6><b>Last Updated: @comment.DateUpdated.ToString("d MMM yyyy")</b></h6>
                                            </div>
                                        </div>
                                        <hr />
                                        <p>@comment.Description</p>
                                        <br />
                                        <div class="d-flex align-items-center">
                                            <div class="me-auto">
                                                <h6><b>Date Commented: @comment.DateCreated.ToString("d MMM yyyy")</b></h6>
                                            </div>
                                            @if (comment.ConsumerId == currentconsumerid)
                                            {
                                                <div>
                                                    <a class="text-warning" style="text-decoration: none; cursor:pointer;" data-bs-toggle="modal" data-bs-target="#modify-comment-@comment.Id">
                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                        <small><b>Edit</b></small>
                                                    </a>
                                                    <div class="modal fade" id="modify-comment-@comment.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modify-comment-label-@comment.Id" aria-hidden="true">
                                                        <div class="modal-dialog modal-dialog-centered">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h1 class="modal-title fs-5" id="modify-comment-label-@comment.Id">Edit Your Comment</h1>
                                                                    <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                                                </div>
                                                                <CommentFormComponent OnValidSubmit="@((comData)=>ModifyComment(comData))" OnInitAsync="OnInitializedAsync" comment="comment" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                    &nbsp;
                                                    <a class="text-danger" style="text-decoration: none; cursor: pointer" data-bs-toggle="modal" data-bs-target="#remove-comment-@comment.Id">
                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                        <small><b>Delete</b></small>
                                                    </a>
                                                    <div class="modal fade" id="remove-comment-@comment.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="remove-comment-label-@comment.Id" aria-hidden="true">
                                                        <div class="modal-dialog modal-dialog-centered">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h1 class="modal-title fs-5" id="remove-comment-label-@comment.Id">Confirm Delete Comment?</h1>
                                                                    <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                                                </div>
                                                                <div class="modal-body text-start">
                                                                    This action cannot be undone.
                                                                </div>
                                                                <div class="modal-footer">
                                                                    <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
                                                                    <button type="submit" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="@(()=>removeComment(comment.Id))">Delete</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <hr />
                                        <div class="d-flex">
                                            <div class="me-auto"></div>
                                            <div>
                                                @* <span class="oi oi-thumb-up" aria-hidden="true"></span>
                                                <small>Helpful</small>
                                                &nbsp; *@
                                                @* <a href="/comments/@comment.Id/report" style="text-decoration: none; color: var(--black)">
                                                    <span class="oi oi-flag" aria-hidden="true"></span>
                                                    <small>Report</small>
                                                </a> *@
                                                &nbsp;
                                                @{
                                                    Commentreport commentreport = new Commentreport { Outcome = "Pending", ConsumerId = currentconsumerid, CommentId = comment.Id };
                                                    bool crCreated = false;

                                                    foreach (var cr in Commentreports)
                                                    {
                                                        if (cr.ConsumerId == currentconsumerid && cr.CommentId == comment.Id)
                                                        {
                                                            crCreated = true;
                                                            commentreport = cr;
                                                        }
                                                    }
                                                    if (crCreated)
                                                    {
                                                        <a style="text-decoration: none; color: var(--black); cursor:pointer;" data-bs-toggle="modal" data-bs-target="#edit-commentreport-@commentreport.Id">
                                                            <span class="oi oi-flag" aria-hidden="true"></span>
                                                            <small>Report</small>
                                                        </a>
                                                        <div class="modal fade" id="edit-commentreport-@commentreport.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="edit-commentreport-label-@commentreport.Id" aria-hidden="true">
                                                            <div class="modal-dialog modal-dialog-centered">
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h1 class="modal-title fs-5" id="edit-commentreport-label-@commentreport.Id">Edit Your Report</h1>
                                                                        <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                                                    </div>
                                                                    <CommentreportFormComponent OnValidSubmit="@((creport)=>EditCommentReport(creport))" OnInitAsync="OnInitializedAsync" commentreport="commentreport" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <a style="text-decoration: none; color: var(--black) cursor:pointer;" data-bs-toggle="modal" data-bs-target="#make-commentreport-@commentreport.Id">
                                                            <span class="oi oi-flag" aria-hidden="true"></span>
                                                            <small>Report</small>
                                                        </a>
                                                        <div class="modal fade" id="make-commentreport-@commentreport.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="make-commentreport-label-@commentreport.Id" aria-hidden="true">
                                                            <div class="modal-dialog modal-dialog-centered">
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h1 class="modal-title fs-5" id="make-commentreport-label-@commentreport.Id">Make A Report</h1>
                                                                        <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                                                    </div>
                                                                    <CommentreportFormComponent ButtonText="Submit" OnValidSubmit="@((creport)=>MakeCommentReport(creport))" OnInitAsync="OnInitializedAsync" commentreport="commentreport" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <div class="container-fluid">
            <div class="d-flex align-items-center p-4 row column-gap-2" style="background-color: var(--lightblue)">
                <div class="col-lg">
                    <img src="@product.ImgUri" class="rounded-4 w-100">
                </div>
                <div class="d-lg-none p-2"></div>
                <div class="col-lg-7 d-flex flex-column">
                    <h4><b>@product.Name</b></h4>
                    <span>@product.Description</span>
                    <br />
                    <span>$@String.Format("{0:F2}", product.Price)</span>
                    <span>Company: <span style="color: var(--blue)">@product.Company?.Name</span></span>
                    <span>Category: <span style="color: var(--blue)">@(product.Category?.Name ?? "No Category")</span></span>
                </div>
                <div class="d-lg-none p-2"></div>
                <div class="col-lg d-flex justify-content-end">
                    <a href="/products/@product.Id/reviews/create" class="btn rounded-5 text-white" style="background-color: var(--blue)">
                        <small><b>Write A Review</b></small>
                        <span class="oi oi-share"></span>
                    </a>
                </div>
            </div>
            <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
                <div class="col-lg">
                    <img src="@product.Company?.LogoUri" class="rounded-4 w-100">
                </div>
                <div class="col-lg-3">
                    <h5 class="m-0">@product.Company?.Name</h5>
                </div>
                <div class="col-lg">
                    <h6>Total Reviews:</h6>
                    <span>
                        @companyreviewCount
                    </span>
                </div>
                <div class="col-lg">
                    <h6>Overall Rating:</h6>
                    <span>
                        @{
                            if (companyreviews != null && companyreviewCount > 0)
                            {
                                int? sumofRatings = 0;
                                foreach (var rev in companyreviews)
                                {
                                    sumofRatings += rev.Rating;
                                }
                                overallRating = Math.Round(((decimal)sumofRatings / companyreviewCount), 1);
                            }
                        }
                        @overallRating
                    </span>
                    <span class="oi oi-star" style="color:orange"></span>
                </div>
                <div class="col-lg d-flex justify-content-end">
                    <a href="/companies/view/@product.CompanyId" class="btn rounded-5 text-white" style="background-color: var(--blue)">
                        <small><b>View Page</b></small>
                        <span class="oi oi-arrow-right"></span>
                    </a>
                </div>
            </div>

            <!--Card for progress bars for Reviews-->
            <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
                <div class="d-flex">
                    <div class="me-auto">
                        <h3 class="card-title" style="color: var(--black)"><b>Reviews (@productreviewCount)</b></h3>
                    </div>
                    <div>
                        <small><b>Sort: </b></small>
                        <small style="color: var(--blue)"><b>Most Recent</b></small>
                    </div>
                </div>

            </div>

            @if (reviews != null)
            {
                @foreach (var review in reviews)
                {
                    <div class="d-flex align-items-center m-4 p-3 row column-gap-2 bg-white rounded-4">
                        <div class="d-flex">
                            <div class="me-auto">
                                <h4>
                                    <img class="profile" src="@review.Consumer?.ProfileImgUri" style="width: 30px; height: 30px;" />
                                    <b>@((review.Consumer != null) ? $"{review.Consumer.FirstName} {review.Consumer.LastName}" : "Deleted Consumer")</b>
                                </h4>
                            </div>
                            <div>
                                <h6><b>Last Updated: @review.DateUpdated.ToString("d MMM yyyy")</b></h6>
                            </div>
                        </div>
                        <hr />
                        <h4 class="align-items-center">
                            @{
                                int maxRating = 5; // Assuming a maximum of 5 stars
                                int? rating = review.Rating;

                                for (int i = 1; i <= maxRating; i++)
                                {
                                    <span class="oi oi-star" style="color: @(i <= rating ? "orange" : "gray")"></span>
                                }
                            }
                        </h4>
                        <br />
                        <p>@review.Description</p>
                        <br />
                        <h6><b>Date Reviewed: @review.DateCreated.ToString("d MMM yyyy")</b></h6>
                        <hr />

                        <div class="d-flex flex-column container">
                            <div class="d-flex">
                                <div class="me-auto">
                                    <button class="btn" type="button" data-bs-toggle="collapse" data-bs-target="#collapseReview-@review.Id" aria-expanded="false" aria-controls="collapseReview-@review.Id">
                                        <small>View Replies & Comments</small>
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
                                    </button>
                                </div>

                                <div>
                                    <a href="/reviews/@review.Id/comments/create" style="text-decoration: none; color: var(--black);">
                                        <span class="oi oi-comment-square" aria-hidden="true"></span>
                                        <small>Comment</small>
                                    </a>
                                    &nbsp;
                                    <span class="oi oi-thumb-up" aria-hidden="true"></span>
                                    <small>Helpful</small>
                                    &nbsp;
                                    <a href="/reviews/@review.Id/report" style="text-decoration: none; color: var(--black)">
                                        <span class="oi oi-flag" aria-hidden="true"></span>
                                        <small>Report</small>
                                    </a>
                                </div>
                            </div>

                            <div class="collapse" id="collapseReview-@review.Id">
                                @if (review.Reply != null)
                                {
                                    <div class="d-flex align-items-center m-4 p-3 row bg-light rounded-4" style="background-color:#ADD8E6">
                                        <div class="d-flex">
                                            <div class="me-auto">
                                                <h4>
                                                    <span class="oi"><span class="oi-arrow-thick-right" aria-hidden="true"></span></span>
                                                    <b>Reply from @product.Company.Name</b>
                                                </h4>
                                            </div>
                                            <div>
                                                <h6><b>Date Replied: @(review.DateReplied?.ToString("d MMM yyyy") ?? "Not Replied")</b></h6>
                                            </div>
                                        </div>
                                        <hr />
                                        <p>@review.Reply</p>
                                    </div>
                                }

                                @foreach (var comment in Comments)
                                {
                                    if (comment.ReviewId == review.Id)
                                    {
                                        <div class="d-flex align-items-center m-4 p-3 row bg-light rounded-4" style="background-color:#ADD8E6">
                                            <div class="d-flex">
                                                <div class="me-auto">
                                                    <h4>
                                                        <img class="profile" src="@comment.Consumer?.ProfileImgUri" style="width: 30px; height: 30px;" />
                                                        <b>@((comment.Consumer != null) ? $"{comment.Consumer.FirstName} {comment.Consumer.LastName}" : "Deleted Consumer")</b>
                                                    </h4>
                                                </div>
                                                <div>
                                                    <h6><b>Last Updated: @comment.DateUpdated.ToString("d MMM yyyy")</b></h6>
                                                </div>
                                            </div>
                                            <hr />
                                            <p>@comment.Description</p>
                                            <br />
                                            <h6><b>Date Commented: @review.DateCreated.ToString("d MMM yyyy")</b></h6>
                                            <hr />
                                            <div class="d-flex">
                                                <div class="me-auto"></div>
                                                <div>
                                                    <span class="oi oi-thumb-up" aria-hidden="true"></span>
                                                    <small>Helpful</small>
                                                    &nbsp;
                                                    <a href="/comments/@comment.Id/report" style="text-decoration: none; color: var(--black)">
                                                        <span class="oi oi-flag" aria-hidden="true"></span>
                                                        <small>Report</small>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HttpClient _client;
    [Parameter] public int id { get; set; }
    private List<Product>? products;
    private Product? product = new Product();
    private IList<Review> Reviews;
    private IList<Comment> Comments;
    private IList<Consumer> Consumers;
    private IList<Reviewreport> Reviewreports;
    private IList<Commentreport> Commentreports;
    private List<Review>? reviews;
    private List<Review>? companyreviews;
    private int currentconsumerid;
    int productreviewCount = 0;
    int companyreviewCount = 0;
    decimal? overallRating = 0;
    decimal? productRating = 0;
    private int selectedSortOption = 1;
    private string selectedSortOptionText = "Newest First";
    List<int> selectedRatings = new List<int>();

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
        selectedRatings = Enumerable.Range(1, 5).ToList();
    }

    protected async override Task OnInitializedAsync()
    {
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{id}");
        products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        Comments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");
        Consumers = await _client.GetFromJsonAsync<List<Consumer>>($"{Endpoints.ConsumersEndpoint}");
        Reviewreports = await _client.GetFromJsonAsync<List<Reviewreport>>($"{Endpoints.ReviewreportsEndpoint}");
        Commentreports = await _client.GetFromJsonAsync<List<Commentreport>>($"{Endpoints.CommentreportsEndpoint}");
        var context = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (context.User.IsInRole("Consumer"))
        {
            var consumer = Consumers.FirstOrDefault(u => u.UserId == (context.User.FindFirst(c => c.Type == "sub")?.Value));
            currentconsumerid = consumer.Id;
        }
        productreviewCount = 0;
        companyreviewCount = 0;
        var productReviews = new List<Review>();
        var companyReviews = new List<Review>();
        if (Reviews != null)
        {
            foreach (var review in Reviews)
            {
                if (review.ProductId == product.Id) //get all the reviews of this specific product
                {
                    productReviews.Add(review);
                    productreviewCount++;
                }

                if (review.Product.CompanyId == product.CompanyId)
                {
                    companyReviews.Add(review);
                    companyreviewCount++;
                }
            }
        }
        reviews = productReviews;
        companyreviews = companyReviews;
    }

    private async Task WriteReview((Review rev, bool revChanged) revData)
    {
        revData.rev.DateCreated = DateTime.Now;
        revData.rev.DateUpdated = DateTime.Now;
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, revData.rev);
        await js.InvokeVoidAsync("hideModal", "#write-review");
        await OnInitializedAsync();
    }

    private async Task ModifyReview((Review rev, bool revChanged) revData)
    {
        revData.rev.DateUpdated = revData.revChanged ? DateTime.Now : revData.rev.DateUpdated;
        await _client.PutAsJsonAsync($"{Endpoints.ReviewsEndpoint}/{revData.rev.Id}", revData.rev);
        await js.InvokeVoidAsync("hideModal", $"#modify-review-{revData.rev.Id}");
        await OnInitializedAsync();
    }

    async Task removeReview(int reviewId)
    {
        if (Reviews != null)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
            await OnInitializedAsync();
        }
    }

    private async Task WriteComment((Comment com, bool comChanged) comData)
    {
        comData.com.DateCreated = DateTime.Now;
        comData.com.DateUpdated = DateTime.Now;
        await _client.PostAsJsonAsync(Endpoints.CommentsEndpoint, comData.com);
        await js.InvokeVoidAsync("hideModal", $"#write-comment-{comData.com.ReviewId}");
        await OnInitializedAsync();
    }

    private async Task ModifyComment((Comment com, bool comChanged) comData)
    {
        comData.com.DateUpdated = comData.comChanged ? DateTime.Now : comData.com.DateUpdated;
        await _client.PutAsJsonAsync($"{Endpoints.CommentsEndpoint}/{comData.com.Id}", comData.com);
        await js.InvokeVoidAsync("hideModal", $"#modify-comment-{comData.com.Id}");
        await OnInitializedAsync();
    }

    async Task removeComment(int commentId)
    {
        if (Comments != null)
        {
            await _client.DeleteAsync($"{Endpoints.CommentsEndpoint}/{commentId}");
            await OnInitializedAsync();
        }
    }

    private async Task MakeReviewReport(Reviewreport rreport)
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewreportsEndpoint, rreport);
        await js.InvokeVoidAsync("hideModal", $"#make-reviewreport-{rreport.Id}");
        await OnInitializedAsync();
    }

    private async Task EditReviewReport(Reviewreport rreport)
    {
        await _client.PutAsJsonAsync($"{Endpoints.ReviewreportsEndpoint}/{rreport.Id}", rreport);
        await js.InvokeVoidAsync("hideModal", $"#edit-reviewreport-{rreport.Id}");
        await OnInitializedAsync();
    }

    private async Task MakeCommentReport(Commentreport creport)
    {
        await _client.PostAsJsonAsync(Endpoints.CommentreportsEndpoint, creport);
        await js.InvokeVoidAsync("hideModal", $"#make-commentreport-{creport.Id}");
        await OnInitializedAsync();
    }

    private async Task EditCommentReport(Commentreport creport)
    {
        await _client.PutAsJsonAsync($"{Endpoints.CommentreportsEndpoint}/{creport.Id}", creport);
        await js.InvokeVoidAsync("hideModal", $"#edit-commentreport-{creport.Id}");
        await OnInitializedAsync();
    }

    void ChangeSortOption(int option)
    {
        selectedSortOption = option;
        switch(option)
        {
            case 1:
                selectedSortOptionText = "Newest First";
                break;
            case 2:
                selectedSortOptionText = "Oldest First";
                break;
            case 3:
                selectedSortOptionText = "Highest Rating";
                break;
            case 4:
                selectedSortOptionText = "Lowest Rating";
                break;
        }
        StateHasChanged();
    }

    Func<Review, object> GetSortExpression(int option)
    {
        switch (option)
        {
            case 1:
                return r => -r.DateUpdated.Ticks; // Newest First, negate to sort in descending order
            case 2:
                return r => r.DateUpdated.Ticks; // Oldest First
            case 3:
                return r => -(r.Rating ?? 0); // Highest Rating, negate to sort in descending order
            case 4:
                return r => r.Rating ?? 0; // Lowest Rating
            default:
                return r => -r.DateUpdated.Ticks; // Default to Newest First
        }
    }

    void ToggleRating(int rating)
    {
        if (selectedRatings.Contains(rating))
        {
            selectedRatings.Remove(rating);
        }
        else
        {
            selectedRatings.Add(rating);
        }
        StateHasChanged();
    }

    string GetRatingColor(int rating)
    {
        switch (rating)
        {
            case 5:
                return "#49A401";
            case 4:
                return "#9DEA1E";
            case 3:
                return "#FFC107";
            case 2:
                return "#FF9529";
            case 1:
                return "#DC3545";
            default:
                return "gray";
        }
    }
}
