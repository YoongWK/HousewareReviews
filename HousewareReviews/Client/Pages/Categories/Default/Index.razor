@page "/categories/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@implements IAsyncDisposable

<PageTitle>Houseware Reviews - Categories</PageTitle>

<div class="container-fluid p-4">
    <h4 class="card-title pb-3">Categories</h4>

    @if (Categories == null)
    {
        <div class="alert alert-info">Loading Categories...</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-xl-5 row-cols-lg-4 row-cols-md-3 row-cols-sm-2 g-4">
            @{
                foreach (var category in Categories)
                {
                    <div class="col">
                        <a href="/categories/@category.Id/products" style="text-decoration: none;">
                            <div class="card text-center h-100 rounded-5">
                                @{
                                    var imgId = $"img-category-{category.Id}";
                                    if (!imgListenersAdded)
                                    {
                                        imgIds.Add(imgId);
                                        js.InvokeVoidAsync("addImgHeightListener", imgId, 0.5);
                                    }
                                    <img src="@category.ImgUri" class="card-img-top rounded-top-5 w-100" style="object-fit:cover;" onerror="this.style.display='none'" id="@imgId" onload="updateImgHeight('@imgId', 0.5)">
                                }
                                <div class="card-body p-2 m-0">
                                    <h5 class="card-title">@category.Name</h5>
                                </div>
                            </div>
                        </a>
                    </div>
                }
                imgListenersAdded = true;
            }
        </div>
    }
</div>

@code {
    private HttpClient _client;
    private List<Category>? Categories;
    private List<String>? imgIds = new List<String>();
    private bool imgListenersAdded = false;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
    }

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }
   
    public async ValueTask DisposeAsync()
    {
        foreach (var Id in imgIds)
        {
            await js.InvokeVoidAsync("removeImgHeightListener", Id);
        }
    }
}
