@page "/manage/companies/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize(Roles = "Staff")]

<PageTitle>Houseware Reviews - Manage Companies</PageTitle>

<div class="container-fluid p-4">
    <h4 class="card-title pb-3">Companies</h4>

    @if (Companies == null)
    {
        <div class="alert alert-info">Loading Companies...</div>
    }
    else
    {
        <CompanyModal Id="@("create-company")"
                      ItemName="New Company"
                      Action="Create"
                      OnValidSubmit="@((cat)=>CreateCompany(cat))"
                      OnInitAsync="OnInitializedAsync"
                      Company="@(new Company())" />
            
        <table class="table table-responsive w-100 py-2 m-0" id="companiesTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th class="d-none d-sm-table-cell">UEN</th>
                    <th class="d-none d-md-table-cell">Logo</th>
                    <th>Products</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var company in Companies)
                {
                    <tr>
                        <td>@company.Name</td>
                        <td class="d-none d-sm-table-cell">@company.UEN</td>
                        <td class="d-none d-md-table-cell">
                            <img src="@company.LogoUri" style="height:70px;width:140px;object-fit:cover;" />
                        </td>
                        <td>
                            <EntityNavButton NavAddress="@($"/manage/companies/{company.Id}/products")"
                                             Count="@(Products == null? 0 : Products.Count(p => p.CompanyId == company.Id))" />
                        </td>
                        <td>
                            <CompanyModal Id="@($"view-company-{company.Id}")"
                                          ItemName="@company.Name"
                                          Action="View"
                                          Company="company" />

                            <CompanyModal Id="@($"edit-company-{company.Id}")"
                                          ItemName="@company.Name"
                                          Action="Edit"
                                          OnValidSubmit="@((cat)=>EditCompany(cat))"
                                          OnInitAsync="OnInitializedAsync"
                                          Company="company" />

                            <ConfirmDeleteModal Id="@($"delete-company-{company.Id}")"
                                                ItemName="@company.Name"
                                                DeleteFunction="@(()=>DeleteCompany(company.Id))" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private HttpClient _client;
    private List<Company>? Companies;
    private List<Product>? Products;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
    }

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

    private async Task CreateCompany(Company comp)
    {
        await _client.PostAsJsonAsync(Endpoints.CompaniesEndpoint, comp);
        await js.InvokeVoidAsync("hideModal", "#create-company");
        await OnInitializedAsync();
    }

    private async Task EditCompany(Company comp)
    {
        await _client.PutAsJsonAsync($"{Endpoints.CompaniesEndpoint}/{comp.Id}", comp);
        await js.InvokeVoidAsync("hideModal", $"#edit-company-{comp.Id}");
        await OnInitializedAsync();
    }

    private async Task DeleteCompany(int companyId)
    {
        if (Companies != null)
        {
            await _client.DeleteAsync($"{Endpoints.CompaniesEndpoint}/{companyId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#companiesTable", "Search Companies");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#companiesTable");
    }
}
