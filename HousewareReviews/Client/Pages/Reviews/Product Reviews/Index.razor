@page "/products/{ProductId:int}/reviews/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="container-fluid p-4">
    <h3 class="card-title pb-3">@product?.Name Reviews</h3>
    
    @if (Reviews == null)
    {
        <div class="alert alert-info">Loading Reviews...</div>
    }
    else
    {
        <!-- This page is for staff to view reviews of a certain product-->
        <AuthorizeView Roles="Staff">
            <button type="button" class="btn btn-success btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#create-review">
                <span class="oi oi-plus"></span>
                Create Review
            </button>
            <div class="modal fade" id="create-review" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="create-review-label" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="create-review-label">Create New @product.Name Review</h1>
                            <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                        </div>
                        <StaffFormComponent ButtonText="Create" OnValidSubmit="@((revData)=>CreateReview(revData))" OnInitAsync="OnInitializedAsync" review="new Review{ProductId=ProductId}" DisallowConsumer="false" />
                    </div>
                </div>
            </div>

            <table class="table table-responsive w-100 py-2 m-0" id="reviewsTable">
                <thead>
                    <tr>
                        <th>Rating</th>
                        <th>Status</th>
                        <th class="d-none d-md-table-cell">Consumer</th>
                        <th>Comments</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var review in Reviews)
                    {
                        <tr>
                            <td>@review.Rating</td>
                            <td>@(String.IsNullOrEmpty(review.Reply) ? "Not Replied" : "Replied")</td>
                            <td class="d-none d-md-table-cell">@((review.Consumer != null) ? $"{review.Consumer.FirstName} {review.Consumer.LastName}" : "[Deleted Consumer]")</td>
                            <td>
                                <a href="/reviews/@review.Id/comments" class="btn btn-info btn-sm shadow-none">
                                    <span class="oi oi-eye"></span>&nbsp;
                                    @{
                                        var commentCount = 0;
                                        if (Comments != null)
                                        {
                                            @foreach (var comment in Comments)
                                            {
                                                if (comment.ReviewId == review.Id)
                                                {
                                                    commentCount++;
                                                }
                                            }
                                        }
                                        @commentCount
                                    }
                                </a>
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#view-review-@review.Id">
                                    <span class="oi oi-book"></span>
                                </button>
                                <div class="modal fade" id="view-review-@review.Id" tabindex="-1" aria-labelledby="view-review-label-@review.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="view-review-label-@review.Id">View Review</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <StaffFormComponent review="review" Disabled="true" ShowDate="true" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-warning btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#edit-review-@review.Id">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <div class="modal fade" id="edit-review-@review.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="edit-review-label-@review.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="edit-review-label-@review.Id">Edit Review</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitializedAsync"></button>
                                            </div>
                                            <StaffFormComponent OnValidSubmit="@((revData)=>EditReview(revData))" OnInitAsync="OnInitializedAsync" review="review" />
                                        </div>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-danger btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#delete-review-@review.Id">
                                    <span class="oi oi-delete"></span>
                                </button>
                                <div class="modal fade" id="delete-review-@review.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="delete-review-label-@review.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="delete-review-label-@review.Id">Confirm Delete Review?</h1>
                                                <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body text-start">
                                                This action cannot be undone.
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="@(()=>DeleteReview(review.Id))">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </AuthorizeView>
        }
</div>

@code {
    [Parameter] public int ProductId { get; set; }
    private HttpClient _client;
    Product? product;
    private List<Review>? Reviews;
    private List<Comment>? Comments;
    bool userIsStaff = false;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("public");
    }

    protected async override Task OnInitializedAsync()
    {
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{ProductId}");
        var allReviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        Comments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");
        var productReviews = new List<Review>();
        if (allReviews != null)
        {
            foreach (var rev in allReviews)
            {
                if (rev.ProductId == ProductId)
                {
                    productReviews.Add(rev);
                }
            }
        }
        Reviews = productReviews;
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userIsStaff = authstate.User.IsInRole("Staff");
    }

    private async Task CreateReview((Review rev, bool revChanged, bool revReplyChanged) revData)
    {
        var latestDateTime = DateTime.Now;
        revData.rev.DateCreated = latestDateTime;
        revData.rev.DateUpdated = latestDateTime;
        revData.rev.DateReplied = String.IsNullOrEmpty(revData.rev.Reply) ? null : latestDateTime;
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, revData.rev);
        await js.InvokeVoidAsync("hideModal", "#create-review");
        await OnInitializedAsync();
    }

    private async Task EditReview((Review rev, bool revChanged, bool revReplyChanged) revData)
    {
        var latestDateTime = DateTime.Now;
        revData.rev.DateUpdated = revData.revChanged ? latestDateTime : revData.rev.DateUpdated;
        revData.rev.DateReplied = revData.revReplyChanged ? (String.IsNullOrEmpty(revData.rev.Reply) ? null : latestDateTime) : revData.rev.DateReplied;
        await _client.PutAsJsonAsync($"{Endpoints.ReviewsEndpoint}/{revData.rev.Id}", revData.rev);
        await js.InvokeVoidAsync("hideModal", $"#edit-review-{revData.rev.Id}");
        await OnInitializedAsync();
    }

    private async Task DeleteReview(int reviewId)
    {
        if (Reviews != null)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (userIsStaff)
        {
            await js.InvokeVoidAsync("AddDataTable", "#reviewsTable", "Search Reviews");
        }
    }

    public void Dispose()
    {
        if (userIsStaff)
        {
            js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
        }
    }
}
