@inject IHttpClientFactory ClientFactory
@attribute [Authorize(Roles = "Consumer")]

<EditForm Model="@commentreport" OnValidSubmit="@(() => OnValidSubmitCallback(commentreport))" style="font-size:1rem;">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-start mb-0 pt-3" />
    <div class="modal-body text-start">
        <fieldset>
            <div class="form-group pb-3">
                <label>Violation Category:</label>
                <div>
                    <InputSelect @bind-Value="commentreport.Category" class="form-control shadow-none">
                        <option value="">-- Select Category --</option>
                        <option value="Spam">Spam</option>
                        <option value="Inappropriate Content">Inappropriate Content</option>
                        <option value="False Information">False Information</option>
                        <option value="Conflict of Interest">Conflict of Interest</option>
                        <option value="Others">Others</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => commentreport.Category)" />
                </div>
            </div>

            <div class="form-group">
                <div class="d-flex">
					<label class="w-50">Description:</label>
					<p class="d-inline-flex justify-content-end w-50 m-0 text-secondary" style="font-size:0.8rem;">Count:&nbsp;<span>@(commentreport.Description?.Length ?? 0)</span>/300</p>
                </div>
                <div>
                    <InputTextArea @bind-Value="@commentreport.Description" class="form-control shadow-none" style="resize:none;" rows="4" maxlength="301" oninput="updateCharCount(this, 300)" />
                    <ValidationMessage For="@(() => commentreport.Description)" />
                </div>
            </div>
        </fieldset>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal" @onclick="OnInitAsync">Close</button>
        <button type="submit" class="btn btn-success shadow-none">
            @ButtonText
        </button>
        @if (Modify)
        {
            <button type="button" class="btn btn-danger shadow-none" data-bs-dismiss="modal" @onclick="DeleteCommentreport">Delete</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public Commentreport? commentreport { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback<Commentreport> OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnInitAsync { get; set; }
    [Parameter] public bool Modify { get; set; } = false;

    private HttpClient _client;

    protected override void OnInitialized()
    {
        _client = ClientFactory.CreateClient("private");
    }

    private async Task DeleteCommentreport()
    {
        if ((Modify) && (commentreport != null))
        {
            await _client.DeleteAsync($"{Endpoints.CommentreportsEndpoint}/{commentreport.Id}");
            await OnInitAsync.InvokeAsync();
        }
    }

    private async Task OnValidSubmitCallback(Commentreport creport)
    {
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(creport);
        }
    }
}
