// <auto-generated />
using System;
using HousewareReviews.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HousewareReviews.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126085550_updatedSeedings")]
    partial class updatedSeedings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("HousewareReviews.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d594264-9593-44af-b434-728b3460aa1f",
                            Email = "staff@blazor.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@BLAZOR.COM",
                            NormalizedUserName = "STAFF@BLAZOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI9F0g7OT4oaUyrLPSY74AH6tCM47+d/aAu3/6x3S1q36sutaWKImfYUiH72dfrd1g==",
                            PhoneNumber = "91234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aba0bc06-364a-4f09-b929-b5f4949119f4",
                            TwoFactorEnabled = false,
                            UserName = "staff@blazor.com"
                        },
                        new
                        {
                            Id = "1ce40de7-b2a7-4cf4-a8f3-c811191a664d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e219bcd-dade-42a7-83d4-e55c5b0cce0c",
                            Email = "consumer@blazor.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSUMER@BLAZOR.COM",
                            NormalizedUserName = "CONSUMER@BLAZOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBI/spuv7wnowziQU1WZzKGcGvEGA/7B4LwY4L80tMDu6ObGW+qx366UVN1HrEL+g==",
                            PhoneNumber = "98765432",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d38ef87-9b5b-4f4b-83d4-d8c8b057c2af",
                            TwoFactorEnabled = false,
                            UserName = "consumer@blazor.com"
                        },
                        new
                        {
                            Id = "9du2ii40-h7d9-8sj2-j98s-is0dh83jk48s",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a831e8d-4630-4223-bd73-83cacfc5c654",
                            Email = "maymorrison@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAYMORRISON@GMAIL.COM",
                            NormalizedUserName = "MAYMORRISON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ56WUG/j2o/mixESXqygm3ZWpExfHbbEVgNv791pD87rRbiZoix8e84yaVcot1l7w==",
                            PhoneNumber = "92438900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b63222b-7902-46a5-a804-9507144734b4",
                            TwoFactorEnabled = false,
                            UserName = "maymorrison@gmail.com"
                        },
                        new
                        {
                            Id = "2oh7diw9-0or5-3jf9-8ss6-ks8ya5h297bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c092a386-c04f-4d52-9a63-557e5c4a42e1",
                            Email = "joshuatan@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSHUATAN@OUTLOOK.COM",
                            NormalizedUserName = "JOSHUATAN@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaMk9M2mWhhk6Wbh/zq71OyFBvtN+/kSOIbzF3FH7mmD5ZpSozJGnEzm3uo2aNuTg==",
                            PhoneNumber = "83072245",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4aed10a-8535-4959-b198-4583e3dd88b1",
                            TwoFactorEnabled = false,
                            UserName = "joshuatan@outlook.com"
                        },
                        new
                        {
                            Id = "5di8sy83-2i9r-f56h-s8d9-s09njsh7dd53",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6a9cbe9-2eb6-4a07-a9ca-ed7796f066ae",
                            Email = "ethanlim@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHANLIM@HOTMAIL.COM",
                            NormalizedUserName = "ETHANLIM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENpF7ax8NIzMuMIn7kSEPuNhBha5rnuy0SR5XdhqJPK1NL3TSxMtmdC6hkvWA3SXbQ==",
                            PhoneNumber = "87229044",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a3117d0-947d-4848-9622-533f5a1f415d",
                            TwoFactorEnabled = false,
                            UserName = "ethanlim@hotmail.com"
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUri = "/images/categories/Appliances.jpg",
                            Name = "Appliances"
                        },
                        new
                        {
                            Id = 2,
                            ImgUri = "/images/categories/Bathroom.jpg",
                            Name = "Bathroom"
                        },
                        new
                        {
                            Id = 3,
                            ImgUri = "/images/categories/Beddings.jpg",
                            Name = "Beddings"
                        },
                        new
                        {
                            Id = 4,
                            ImgUri = "/images/categories/Furniture.jpg",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 5,
                            ImgUri = "/images/categories/HomeDecor.jpg",
                            Name = "Home Decor"
                        },
                        new
                        {
                            Id = 6,
                            ImgUri = "/images/categories/HomeOrganisation.jpg",
                            Name = "Home Organisation"
                        },
                        new
                        {
                            Id = 7,
                            ImgUri = "/images/categories/HomeTools.jpg",
                            Name = "Home Tools"
                        },
                        new
                        {
                            Id = 8,
                            ImgUri = "/images/categories/Kitchen&Dining.jpg",
                            Name = "Kitchen & Dining"
                        },
                        new
                        {
                            Id = 9,
                            ImgUri = "/images/categories/Lighting.jpg",
                            Name = "Lighting"
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "67469933",
                            Description = "Leading home appliance brand for high-quality and affordable hobs, hoods, and instant water heaters.",
                            Email = "enquiry@aerogaz.com",
                            LogoUri = "/images/companies/Aerogaz.jpg",
                            Name = "Aerogaz",
                            UEN = "200302472K",
                            WebsiteUrl = "https://aerogaz.com/"
                        },
                        new
                        {
                            Id = 2,
                            ContactNumber = "64726500",
                            Description = "Singapore-based company for quality & affordable home appliances and consumer electronics.",
                            Email = "sg.support@cornellappliances.com",
                            LogoUri = "/images/companies/Cornell.jpg",
                            Name = "Cornell",
                            UEN = "200310215D",
                            WebsiteUrl = "https://sg.cornellappliances.com/"
                        },
                        new
                        {
                            Id = 3,
                            ContactNumber = "67195413",
                            Description = "Renowned company famous for its innovative vacuum cleaners, hand dryers, & bladeless fans.",
                            Email = "sg.service@dyson.com",
                            LogoUri = "/images/companies/Dyson.jpg",
                            Name = "Dyson",
                            UEN = "197000473M",
                            WebsiteUrl = "https://www.dyson.com.sg/"
                        },
                        new
                        {
                            Id = 4,
                            ContactNumber = "67273699",
                            Description = "Recognised global appliance brand for high-quality home and kitchen appliances.",
                            Email = "customer-care.sin@electrolux.com",
                            LogoUri = "/images/companies/Electrolux.jpg",
                            Name = "Electrolux",
                            UEN = "200310215D",
                            WebsiteUrl = "https://www.electrolux.com.sg/"
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImgUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Consumers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "98765432",
                            Email = "consumer@blazor.com",
                            FirstName = "Yoong",
                            LastName = "Wai Kit",
                            NRIC = "S9067028Z",
                            Password = "P@ssword1",
                            ProfileImgUri = "/images/users/waikit.jpg",
                            UserId = "1ce40de7-b2a7-4cf4-a8f3-c811191a664d"
                        },
                        new
                        {
                            Id = 2,
                            ContactNumber = "92438900",
                            Email = "maymorrison@gmail.com",
                            FirstName = "May",
                            LastName = "Morrison",
                            NRIC = "S2836518E",
                            Password = "P@ssword1",
                            ProfileImgUri = "/images/users/may.jpg",
                            UserId = "9du2ii40-h7d9-8sj2-j98s-is0dh83jk48s"
                        },
                        new
                        {
                            Id = 3,
                            ContactNumber = "83072245",
                            Email = "joshuatan@outlook.com",
                            FirstName = "Joshua",
                            LastName = "Tan",
                            NRIC = "T8904392R",
                            Password = "P@ssword1",
                            ProfileImgUri = "/images/users/joshua.jpg",
                            UserId = "2oh7diw9-0or5-3jf9-8ss6-ks8ya5h297bd"
                        },
                        new
                        {
                            Id = 4,
                            ContactNumber = "87229044",
                            Email = "ethanlim@hotmail.com",
                            FirstName = "Ethan",
                            LastName = "Lim",
                            NRIC = "T3876509Z",
                            Password = "P@ssword1",
                            ProfileImgUri = "/images/users/ethan.jpg",
                            UserId = "5di8sy83-2i9r-f56h-s8d9-s09njsh7dd53"
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Modern wall fan featuring a powerful motor with 3-speed control for customized airflow.",
                            ImgUri = "/images/products/az173wf.jpg",
                            Name = "16\" Wall Fan (AZ-173WF)",
                            Price = 39.899999999999999
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CompanyId = 1,
                            Description = "Ultra slim water heater with splash-proof IPX5, anti scald device, & 5 shower options.",
                            ImgUri = "/images/products/s895.jpg",
                            Name = "Instant Water Heater – Slim Series (S895)",
                            Price = 169.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Wall Fan with 3 speeds pull-string control, left-right oscillation and has an adjustable tilting angle",
                            ImgUri = "/images/products/az171wf.jpg",
                            Name = "16\" Wall Fan (AZ-171WF)",
                            Price = 49.899999999999999
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "4 blade table fan with 3 speeds and a sleek retro design.",
                            ImgUri = "/images/products/az1283tf.jpg",
                            Name = "12\" Table Fan (AZ-1283TF)",
                            Price = 49.899999999999999
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Table Fan with 4 speeds and wireless mobile charging capability.",
                            ImgUri = "/images/products/az6006tf.jpg",
                            Name = "6\" Table Fan w Mobile Charger (AZ-6006TF)",
                            Price = 32.899999999999999
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            CompanyId = 1,
                            Description = "Durable high capacity 2-tier steamer with adjustable time & detachable steam tray.",
                            ImgUri = "/images/products/az366st.jpg",
                            Name = "2-Tier Multi-function Steamer (AZ-366ST)",
                            Price = 59.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 8,
                            CompanyId = 1,
                            Description = "Effective slim hood with 3-speed control, powerful extraction, efficient filtering, & re-circulation mode.",
                            ImgUri = "/images/products/az6880.jpg",
                            Name = "60cm Slim Hood (AZ-6880)",
                            Price = 230.0
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("StaffId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReplied")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsumerId = 4,
                            DateCreated = new DateTime(2023, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            DateReplied = new DateTime(2023, 12, 28, 11, 20, 10, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2023, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "This Aerogaz wall fan, power sia! Confirm plus chop the motor very solid. Really shiok for beating the heat. No kidding.",
                            ProductId = 1,
                            Rating = 5,
                            Reply = "Hey Ethan, awesome to hear you’re loving our wall fan. Stay cool and thanks for choosing Aerogaz!"
                        },
                        new
                        {
                            Id = 2,
                            ConsumerId = 2,
                            DateCreated = new DateTime(2024, 1, 2, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            DateReplied = new DateTime(2024, 1, 2, 11, 20, 10, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 1, 2, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "The fan does its job in cooling the place down. But always got a hum sound, need to tahan the extra background melody.",
                            ProductId = 1,
                            Rating = 3,
                            Reply = "Hello May, appreciate your honest review! We’re sorry to hear about the hum and we’ll look into improving this issue. If you have more details to share, hit us up. Thanks!"
                        },
                        new
                        {
                            Id = 3,
                            ConsumerId = 1,
                            DateCreated = new DateTime(2024, 1, 2, 14, 30, 45, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 1, 2, 14, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "Reliable fan. Good choice for staying cool.",
                            ProductId = 1,
                            Rating = 4
                        },
                        new
                        {
                            Id = 4,
                            ConsumerId = 3,
                            DateCreated = new DateTime(2024, 1, 4, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            DateReplied = new DateTime(2024, 1, 6, 11, 20, 10, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 1, 5, 10, 49, 49, 0, DateTimeKind.Unspecified),
                            Description = "Alamak, this Aerogaz 16\" wall fan damn noisy lor! Motor like got its own concert. Confirm regret, better find one quieter, can sleep better.",
                            ProductId = 1,
                            Rating = 1,
                            Reply = "Hi Joshua, we’re sorry to hear about the noise issue. Please contact our support team to share more details. We’re here to help. Thanks for letting us know!"
                        },
                        new
                        {
                            Id = 5,
                            ConsumerId = 3,
                            DateCreated = new DateTime(2024, 1, 24, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            DateReplied = new DateTime(2024, 1, 26, 11, 40, 10, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 1, 24, 10, 49, 49, 0, DateTimeKind.Unspecified),
                            Description = "Love this water heater sia! Instant hot water, sleek design, and easy to install.",
                            ProductId = 2,
                            Rating = 5,
                            Reply = "Hi Joshua, glad to hear that you are loving our product! Thank you for choosing Aerogaz."
                        },
                        new
                        {
                            Id = 6,
                            ConsumerId = 4,
                            DateCreated = new DateTime(2024, 1, 21, 10, 15, 45, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2024, 1, 21, 10, 15, 45, 0, DateTimeKind.Unspecified),
                            Description = "dvjhbwedjgfjsdjvjsovnsdvkjvjovjijsifdjijhfjjfijf9fofmlxxpp-qjjfjfkj",
                            ProductId = 1,
                            Rating = 1
                        });
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImgUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "91234567",
                            Email = "staff@blazor.com",
                            FirstName = "Andrina",
                            LastName = "Morrison",
                            NRIC = "S9372136E",
                            Password = "P@ssword1",
                            ProfileImgUri = "/images/users/andrina.jpg",
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "Consumer",
                            NormalizedName = "CONSUMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "1ce40de7-b2a7-4cf4-a8f3-c811191a664d",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "9du2ii40-h7d9-8sj2-j98s-is0dh83jk48s",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "2oh7diw9-0or5-3jf9-8ss6-ks8ya5h297bd",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "5di8sy83-2i9r-f56h-s8d9-s09njsh7dd53",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Comment", b =>
                {
                    b.HasOne("HousewareReviews.Shared.Domain.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.HasOne("HousewareReviews.Shared.Domain.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.Navigation("Consumer");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Consumer", b =>
                {
                    b.HasOne("HousewareReviews.Shared.Domain.Comment", null)
                        .WithMany("ConsumersFoundUseful")
                        .HasForeignKey("CommentId");

                    b.HasOne("HousewareReviews.Shared.Domain.Review", null)
                        .WithMany("ConsumersFoundUseful")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Product", b =>
                {
                    b.HasOne("HousewareReviews.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("HousewareReviews.Shared.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Report", b =>
                {
                    b.HasOne("HousewareReviews.Shared.Domain.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("HousewareReviews.Shared.Domain.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.HasOne("HousewareReviews.Shared.Domain.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.HasOne("HousewareReviews.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Comment");

                    b.Navigation("Consumer");

                    b.Navigation("Review");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Review", b =>
                {
                    b.HasOne("HousewareReviews.Shared.Domain.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.HasOne("HousewareReviews.Shared.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Consumer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HousewareReviews.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HousewareReviews.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousewareReviews.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HousewareReviews.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Comment", b =>
                {
                    b.Navigation("ConsumersFoundUseful");
                });

            modelBuilder.Entity("HousewareReviews.Shared.Domain.Review", b =>
                {
                    b.Navigation("ConsumersFoundUseful");
                });
#pragma warning restore 612, 618
        }
    }
}
