@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js
@attribute [Authorize(Roles = "Staff")]

<button type="button" class="btn @(Disabled? "btn-secondary" : btnColor) btn-sm shadow-none" data-bs-toggle="modal" data-bs-target="#@Id" disabled="@Disabled">
	<span class="oi @btnIcon"></span>
	@(Action == "Create" ? "Create Comment" : "")
</button>
<div class="modal fade" id="@Id" data-bs-backdrop="@(Action == "View" ? "true" : "static")" data-bs-keyboard="@(Action == "View" ? "true" : "false")" tabindex="-1" aria-labelledby="label-@Id" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="label-@Id">@Action @ItemName</h1>
				<button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close" @onclick="OnInitAsync"></button>
			</div>
			<EditForm Model="@Comment" OnValidSubmit="@(() => OnValidSubmitCallback(Comment))" style="font-size:1rem;">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-start mb-0 pt-3" />
				<div class="modal-body text-start">
					<fieldset disabled="@(Action == "View" ? true : false)">
						<div class="form-group pb-3">
							<label>Consumer:</label>
							<div>
								@if (Action != "Create")
								{
									<input type="text" value="@((Comment.Consumer == null) ? "[Deleted Consumer]" : $"{Comment.Consumer.FirstName} {Comment.Consumer.LastName}")" class="form-control shadow-none" disabled />
								}
								else
								{
									<InputSelect @bind-Value="Comment.ConsumerId" class="form-control shadow-none">
										<option value="">-- Select Consumer --</option>
										@if (Consumers != null)
										{
											foreach (var consumer in Consumers)
											{
												if (consumer.UserId == null)
												{
													<option value="@consumer.Id">@consumer.FirstName @consumer.LastName</option>
												}
											}
										}
									</InputSelect>
									<ValidationMessage For="@(() => Comment.ConsumerId)" />
								}
							</div>
						</div>

						<div class="form-group">
							<div class="d-flex">
								<label class="w-50">Description:</label>
								<p class="d-inline-flex justify-content-end w-50 m-0 text-secondary" style="font-size:0.8rem;">Count:&nbsp;<span>@(Comment.Description?.Length ?? 0)</span>/300</p>
							</div>
							<div>
								<InputTextArea @bind-Value="@Comment.Description" class="form-control shadow-none" style="resize:none;" rows="4" maxlength="301" oninput="updateCharCount(this, 300)" />
								<ValidationMessage For="@(() => Comment.Description)" />
							</div>
						</div>

						@if (Action == "View" ? true : false)
						{
							<div class="form-group py-3">
								<label>Date Created:</label>
								<div>
									<input type="text" value="@Comment.DateCreated.ToString("d MMM yyyy")" class="form-control shadow-none" />

								</div>
							</div>

							<div class="form-group">
								<label>Date Updated:</label>
								<div>
									<input type="text" value="@Comment.DateUpdated.ToString("d MMM yyyy")" class="form-control shadow-none" />
								</div>
							</div>
						}
					</fieldset>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal" @onclick="OnInitAsync">Close</button>
					@if (Action != "View" ? true : false)
					{
						<button type="submit" class="btn btn-success shadow-none">
							@(Action == "Edit" ? "Save" : "Create")
						</button>
					}
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[Parameter] public string? Id { get; set; }
	[Parameter] public string? ItemName { get; set; }
	[Parameter] public string? Action { get; set; }
	[Parameter] public EventCallback<(Comment, bool)> OnValidSubmit { get; set; }
	[Parameter] public EventCallback OnInitAsync { get; set; }
	[Parameter] public Comment? Comment { get; set; }
	[Parameter] public bool Disabled { get; set; } = false;

	private string btnColor;
	private string btnIcon;

	private HttpClient _client;
	private List<Consumer> Consumers;
	private Comment orgComment;

	protected override void OnInitialized()
	{
		switch (Action.ToLower())
		{
			case "create":
				btnColor = "btn-success";
				btnIcon = "oi-plus";
				Action = "Create";
				break;
			case "view":
				btnColor = "btn-primary";
				btnIcon = "oi-book";
				Action = "View";
				break;
			case "edit":
				btnColor = "btn-warning";
				btnIcon = "oi-pencil";
				Action = "Edit";
				break;
		}
		orgComment = Comment;
		_client = ClientFactory.CreateClient("private");
	}

	protected async override Task OnInitializedAsync()
	{
		Consumers = await _client.GetFromJsonAsync<List<Consumer>>($"{Endpoints.ConsumersEndpoint}");
	}

	private async Task OnValidSubmitCallback(Comment com)
	{
		if (OnValidSubmit.HasDelegate)
		{
			com.Consumer = null;
			var comChanged = com.Description != orgComment.Description ? true : false;
			await OnValidSubmit.InvokeAsync((com, comChanged));
		}
	}
}
